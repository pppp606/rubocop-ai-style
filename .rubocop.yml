# ===============================================
# RuboCop AI-First Style (Discussion Draft)
# Purpose: balance clarity for AI-generated/AI-reviewed code with human review.
# Each rule includes rationale and trade-offs for collaborative discussion.
# -----------------------------------------------
# Reference snippet (used when validating these rules):
# class SampleService
#   def call(user_id:, logger: Logger.new($stdout), &block)
#     return unless block
#
#     result = block.call(user_id)
#     logger.info("result=#{result}") if result.positive?
#     result
#   end
# end
# -----------------------------------------------
# ===============================================

AllCops:
  NewCops: enable
  # Keep up with RuboCop improvements so regressions are caught quickly.

# Layout: formatting choices that impact readability for humans and diff tools.
Layout/LineLength:
  Max: 120
  # Long lines are acceptable for AI, but extremely long diffs burden reviewers.
  # Max 120 keeps context compact while avoiding aggressive wrapping.

Layout/HashAlignment:
  Enabled: false
  # Visual alignment is optional; AI does not benefit and humans can choose case-by-case.

Layout/ParameterAlignment:
  Enabled: true
  EnforcedStyle: with_fixed_indentation
  # Aligning parameters on wrapped method definitions helps humans scan arguments quickly.

Layout/TrailingWhitespace:
  Enabled: true
  # Prevent invisible characters from creating noisy diffs.

Layout/IndentationWidth:
  Enabled: true
  Width: 2
  # Explicit 2-space indentation matches Ruby conventions and keeps blocks shallow for AI.

Layout/SpaceAroundOperators:
  Enabled: true
  # Keeps tokens visually separated and helps models tokenize expressions.

# Style: emphasize explicitness and semantic stability.
Style/StringLiterals:
  EnforcedStyle: double_quotes
  # Default to double quotes for consistency. Humans can opt-in to single quotes via disable.

Style/Lambda:
  Enabled: false
  # Allow both -> and lambda keywords so AI can mirror existing patterns.

Style/Documentation:
  Enabled: false
  # Avoid mandatory class/module docs; prefer focused human-written summaries when needed.

Style/GuardClause:
  Enabled: true
  # Encourage early returns for simpler branching. Helps both AI chunking and human reasoning.

Style/HashSyntax:
  EnforcedStyle: ruby19
  # Modern hash syntax is pervasive in training data and widely preferred by reviewers.

Style/TrailingCommaInArrayLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma
  # Trailing commas stabilize diffs when items change order.

Style/TrailingCommaInHashLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma
  # Same rationale as arrays; improves human review with minimal AI impact.

Style/WordArray:
  Enabled: false
  # Prefer explicit arrays so literal types remain obvious to both AI and humans.

Style/SymbolArray:
  Enabled: false
  # Same rationale as WordArray; %i hides literal type information.

# Explicitness boosters
# Style/KeywordArguments:
#   Enabled: true
#   EnforcedStyle: required
#   # Enforce keyword args for clarity.
#   # NOTE: This cop does not exist in RuboCop 1.81.6.

Style/ExplicitBlockArgument:
  Enabled: true
  # Always name block args explicitly (&block) to preserve invocation structure.

# Style/ExplicitStructArgument:
#   Enabled: true
#   # Clarifies struct arguments; avoid implicit splats.
#   # NOTE: This cop does not exist in RuboCop 1.81.6.

Style/NumericPredicate:
  Enabled: true
  # Prefer `zero?`, `positive?`, etc., to surface intent.

Style/NegatedIf:
  Enabled: true
  # Prefer `unless` instead of `if !condition` for clearer phrasing.

# Metrics: relaxed to accommodate AI-generated verbosity without harming review.
Metrics/MethodLength:
  Max: 30

Metrics/BlockLength:
  Max: 50

Metrics/AbcSize:
  Max: 30

Metrics/ClassLength:
  Max: 200

# Naming: maintain consistent token patterns.
Naming/VariableName:
  Enabled: true
  EnforcedStyle: snake_case

Naming/MethodName:
  Enabled: true
  EnforcedStyle: snake_case

Naming/ConstantName:
  Enabled: true

Naming/FileName:
  Enabled: true

# Lint & Security: essential for correctness.
Lint/UnusedMethodArgument:
  Enabled: true

Lint/UselessAssignment:
  Enabled: true

Lint/AssignmentInCondition:
  Enabled: true

Lint/RescueException:
  Enabled: true

Lint/EmptyWhen:
  Enabled: true

Security/Eval:
  Enabled: true

Security/Open:
  Enabled: true

Security/MarshalLoad:
  Enabled: true
