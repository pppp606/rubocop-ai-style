# ===============================================
# RuboCop AI-First Style (Discussion Draft)
# Purpose: improve clarity and consistency for AI-generated and AI-read code.
# Each rule below includes rationale and potential trade-offs for discussion.
# ===============================================

AllCops:
  NewCops: enable
  # Enable new cops by default to keep up with RuboCop improvements

# Layout: visual formatting only — mostly irrelevant for AI.
Layout/LineLength:
  Enabled: false
  # Long lines do not affect AI parsing.
  # → reconsider? Some human reviewers still rely on line breaks for diffs.

Layout/HashAlignment:
  Enabled: false
  # Alignment adds visual symmetry but no semantic meaning for AI.

Layout/ParameterAlignment:
  Enabled: false
  # Same as above — indentation is cosmetic.
  # → reconsider? May help humans spot argument alignment visually.

Layout/TrailingWhitespace:
  Enabled: true
  # Keep clean diffs and avoid invisible characters.
  # Harmless for AI but useful for version control.

Layout/IndentationWidth:
  Enabled: true
  # Structural indentation helps both human readers and some AST parsers.

Layout/SpaceAroundOperators:
  Enabled: true
  # Keeps tokens visually separated; aids tokenization.

# Style: emphasize explicitness and semantic stability.
Style/StringLiterals:
  EnforcedStyle: double_quotes
  # Consistency only. AI can handle both.
  # → reconsider? single_quotes reduce escaping noise.

Style/Lambda:
  Enabled: false
  # Allow both -> and lambda keywords. AI can disambiguate either form.

Style/Documentation:
  Enabled: false
  # Skip mandatory top-level comments.
  # AI can summarize code if needed; humans may prefer optional docs.

Style/GuardClause:
  Enabled: false
  # No forced early returns. Keeps control flow flexible for generation.
  # → reconsider? shorter branching may help AI chunk reasoning.

Style/HashSyntax:
  EnforcedStyle: ruby19
  # Modern syntax is widely represented in AI training data.

Style/TrailingCommaInArrayLiteral:
  Enabled: false
Style/TrailingCommaInHashLiteral:
  Enabled: false
  # Trailing commas are syntactic noise for most LLMs.

Style/WordArray:
  Enabled: false
Style/SymbolArray:
  Enabled: false
  # %w/%i reduce verbosity but hide literal types.
  # Explicit arrays are clearer for AI tokenization.

# Explicitness boosters
# Style/KeywordArguments:
#   Enabled: true
#   EnforcedStyle: required
#   # Enforce keyword args for clarity.
#   # AI can infer meaning from names rather than position.
#   # → reconsider? adds verbosity for short helpers.
#   # NOTE: This cop does not exist in RuboCop 1.81.6

Style/ExplicitBlockArgument:
  Enabled: true
  # Always name block args explicitly (&block).
  # Helps AI maintain call structure.

# Style/ExplicitStructArgument:
#   Enabled: true
#   # Clarifies hash-like struct arguments; avoids implicit splats.
#   # NOTE: This cop does not exist in RuboCop 1.81.6

Style/NumericPredicate:
  Enabled: true
  # Prefer `zero?`, `positive?` for intent clarity.

Style/NegatedIf:
  Enabled: true
  # Prefer `unless` to `if !condition`.
  # → reconsider? some models misinterpret nested `unless`.

# Metrics: relaxed to allow AI-generated verbosity.
Metrics/MethodLength:
  Max: 30
Metrics/BlockLength:
  Max: 50
Metrics/AbcSize:
  Max: 30
Metrics/ClassLength:
  Max: 200
  # → reconsider? long contexts may confuse smaller models.

# Naming: maintain consistent token patterns.
Naming/VariableName:
  Enabled: true
  EnforcedStyle: snake_case
Naming/MethodName:
  Enabled: true
  EnforcedStyle: snake_case
Naming/ConstantName:
  Enabled: true
Naming/FileName:
  Enabled: true
  # snake_case consistency improves model recognition and retrieval.

# Lint & Security: essential for correctness.
Lint/UnusedMethodArgument:
  Enabled: true
Lint/UselessAssignment:
  Enabled: true
Lint/AssignmentInCondition:
  Enabled: true
Lint/RescueException:
  Enabled: true
Lint/EmptyWhen:
  Enabled: true
  # Retain standard safety nets — these affect runtime behavior.

Security/Eval:
  Enabled: true
Security/Open:
  Enabled: true
Security/MarshalLoad:
  Enabled: true
  # Security cops remain critical — prevent AI from generating unsafe code.
