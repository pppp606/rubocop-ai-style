# ===============================================
# RuboCop AI-First Style（検討用ドラフト）
# 目的: AI が生成・レビューするコードと人間レビューの双方で明瞭さを保つ。
# 各ルールには議論用の根拠とトレードオフを記載。
# -----------------------------------------------
# 参照スニペット（ルール検証時の共通例）
# class SampleService
#   def call(user_id:, logger: Logger.new($stdout), &block)
#     return unless block
#
#     result = block.call(user_id)
#     logger.info("result=#{result}") if result.positive?
#     result
#   end
# end
# -----------------------------------------------
# ===============================================

AllCops:
  NewCops: enable
  # RuboCop の改善を取り込み、退行を早期に検出する。

# Layout: 人間レビューと差分ツールの読みやすさに影響するフォーマット。
Layout/LineLength:
  Max: 120
  # 長い行は AI にとって問題ないが、極端な長さはレビュー負荷になる。
  # 120 文字に抑えることで、過度な改行を避けつつ文脈を保つ。

Layout/HashAlignment:
  Enabled: false
  # 視覚的整列は任意。AI には利得がなく、人間はケースごとに判断できる。

Layout/ParameterAlignment:
  Enabled: true
  EnforcedStyle: with_fixed_indentation
  # 複数行に折り返されたメソッド引数を揃えると、人間が意図を追いやすい。

Layout/TrailingWhitespace:
  Enabled: true
  # 不可視文字によるノイズを防ぎ、差分をクリーンに保つ。

Layout/IndentationWidth:
  Enabled: true
  Width: 2
  # 明示的に 2 スペースを指定し、Ruby 慣習と浅いネストを維持する。

Layout/SpaceAroundOperators:
  Enabled: true
  # トークンを視覚的に分離し、モデルのトークナイズを助ける。

# Style: 明示性と意味の安定性を重視。
Style/StringLiterals:
  EnforcedStyle: double_quotes
  # 一貫性のためにダブルクォートを採用。必要なら個別に single_quotes を許可。

Style/Lambda:
  Enabled: false
  # `->` と `lambda` をともに許容し、既存パターンを再利用しやすくする。

Style/Documentation:
  Enabled: false
  # クラス/モジュールのコメントを必須化しない。必要に応じて人間が補足。

Style/GuardClause:
  Enabled: true
  # 早期 return を推奨し、分岐を簡潔に保つ。AI のチャンク化と人間の推論を助ける。

Style/HashSyntax:
  EnforcedStyle: ruby19
  # モダンなハッシュ記法は学習データに広く含まれ、人間にも馴染みがある。

Style/TrailingCommaInArrayLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma
  # 末尾カンマにより要素追加時の差分を安定させる。

Style/TrailingCommaInHashLiteral:
  Enabled: true
  EnforcedStyleForMultiline: consistent_comma
  # 配列と同様の理由。人間レビューでの差分が明確になる。

Style/WordArray:
  Enabled: false
  # 明示的な配列を優先し、リテラル型を AI と人間が把握しやすくする。

Style/SymbolArray:
  Enabled: false
  # %i も非推奨。WordArray と同じ理由で型情報を隠さない。

# Explicitness boosters
# Style/KeywordArguments:
#   Enabled: true
#   EnforcedStyle: required
#   # キーワード引数を強制して意図を明確化。
#   # 注意: この Cop は RuboCop 1.81.6 には存在しない。

Style/ExplicitBlockArgument:
  Enabled: true
  # ブロック引数は常に明示的に (&block) と命名し、呼び出し構造を保つ。

# Style/ExplicitStructArgument:
#   Enabled: true
#   # struct 引数を明示して暗黙のスプラットを避ける。
#   # 注意: この Cop は RuboCop 1.81.6 には存在しない。

Style/NumericPredicate:
  Enabled: true
  # `zero?` や `positive?` などで意図を明確にする。

Style/NegatedIf:
  Enabled: true
  # `if !condition` より `unless` を優先して可読性を上げる。

# Metrics: AI が生成する冗長さを許容しつつレビューに配慮。
Metrics/MethodLength:
  Max: 30

Metrics/BlockLength:
  Max: 50

Metrics/AbcSize:
  Max: 30

Metrics/ClassLength:
  Max: 200

# Naming: 一貫したトークンパターンを維持。
Naming/VariableName:
  Enabled: true
  EnforcedStyle: snake_case

Naming/MethodName:
  Enabled: true
  EnforcedStyle: snake_case

Naming/ConstantName:
  Enabled: true

Naming/FileName:
  Enabled: true

# Lint & Security: 正確性のために不可欠。
Lint/UnusedMethodArgument:
  Enabled: true

Lint/UselessAssignment:
  Enabled: true

Lint/AssignmentInCondition:
  Enabled: true

Lint/RescueException:
  Enabled: true

Lint/EmptyWhen:
  Enabled: true

Security/Eval:
  Enabled: true

Security/Open:
  Enabled: true

Security/MarshalLoad:
  Enabled: true
